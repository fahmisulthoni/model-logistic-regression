# -*- coding: utf-8 -*-
"""implementasi-evaluasi-model-logistic-regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kNmp6GOI9ie0mi_Kxp5aDJBCL609cTGp

**Applikasi Model Evaluasi**

Kali ini kita akan menggunakan data untuk memprediksi kelangsungan hidup pasien yang telah mengalami operasi payudara. Dengan informasi yang dimiliki terkait pasien, kita akan membuat model untuk memprediksi apakah pasien akan bertahan hidup dalam waktu lebih dari 5 tahun atau tidak.

Lebih Lengkapnya kalian bisa membaca informasi tentang dataset di link berikut : https://raw.githubusercontent.com/jbrownlee/Datasets/master/haberman.names

Buat model Klasifikasi (Model/Algoritma Bebas) untuk memprediksi status pasien. dengan ketentuan sebagai berikut :

1. Bagi kedua data ini menjadi data training dan data test dengan test_size=0.25.
2. Pelajar tentang metrics roc_auc_score kemudian buatlah model dan evaluasi dengan menggunakan teknik cross-validation dengan scoring 'roc_auc'. baca https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.cross_val_score.html untuk menggunakan metric roc_auc saat cross-validation.
3. Berapa score rata2 dari model dengan teknik cross-validation tersebut?
4. Prediksi data test dengan model yang telah kalian buat!
5. Bagaimana hasil confusion matrix dari hasil prediksi tersebut?
6. Bagaimana classification report dari hasil prediksi tersebut?
7. Seberapa baik model anda dalam memprediksi seorang pasien mempunyai status positive?
8. Seberapa baik model anda dalam memprediksi seorang pasien mempunyai status negatif?

**Import Dataset**
"""

import pandas as pd
import numpy as np

url = '../input/habermans-survival-data-set/haberman.csv'
list_cols = ['Age', "Patient's Years", "N_positive_ax", "survival_status"]
df = pd.read_csv(url, names=list_cols)

"""Tampilkan 5 data teratas."""

df.head()

"""Menghitung value dari kolom 'survival_status'"""

df['survival_status'].value_counts()

"""Menentukan label dan fitur serta membagi data menjadi data train dan data test dengan test_size=0.25."""

X = df.drop(['survival_status'], axis=1)
y = df['survival_status']

# spliting daa
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=21, stratify=y)

"""Import model ML, cross val score, gscv dan matriks untuk evalusai ML serta menentukan cv score rata-rata"""

from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import cross_val_score,cross_validate
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import confusion_matrix, classification_report
model_lr = LogisticRegression()
cv_score = cross_val_score(model_lr, X,y, scoring='roc_auc', cv=5)
cv_score.mean()

"""Melakukan fitting model dan predicting untuk data test"""

model_lr.fit(X_train, y_train)
y_pred = model_lr.predict(X_test)

"""Confussion matriks yang menunjukkan data TP, TN, FP, dan FN"""

confusion_matrix(y_test, y_pred, labels=[1,2])

"""Membuat report hasil akurasi,precisio, recall dan f1-score dari hasil prediksi"""

print(classification_report(y_test, y_pred))

"""Kita coba secara manual menghitung recall dan precision"""

TP = 52
TN = 3
FP = 17
FN = 5

"""**Precision**

Precision menunjukkan hasil yang lebih menunjukkan keefektifan pada matriks True Negatif dan dangat menghidari adanya data yang False Positif
"""

precision = TP/(TP+FP)
precision

"""**Recall**"""

recall = TP/(TP+FN)
recall